/*! For license information please see 4826.c8c8973b.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkdog_sitter_react=self.webpackChunkdog_sitter_react||[]).push([[4826],{4826:function(t,e,r){r.r(e),r.d(e,{scopeCss:function(){return B}});var n=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),s=0;for(e=0;e<r;e++)for(var c=arguments[e],o=0,i=c.length;o<i;o++,s++)n[s]=c[o];return n},s="-shadowcsshost",c="-shadowcssslotted",o="-shadowcsscontext",i=")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",a=new RegExp("("+s+i,"gim"),u=new RegExp("("+o+i,"gim"),l=new RegExp("("+c+i,"gim"),f=s+"-no-combinator",p=/-shadowcsshost-no-combinator([^\s]*)/,h=[/::shadow/g,/::content/g],g=/-shadowcsshost/gim,d=/:host/gim,v=/::slotted/gim,m=/:host-context/gim,_=/\/\*\s*[\s\S]*?\*\//g,x=/\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g,w=/(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,b=/([{}])/g,S="%BLOCK%",W=function(t,e){var r=k(t),n=0;return r.escapedString.replace(w,(function(){for(var t=[],s=0;s<arguments.length;s++)t[s]=arguments[s];var c=t[2],o="",i=t[4],a="";i&&i.startsWith("{"+S)&&(o=r.blocks[n++],i=i.substring(8),a="{");var u=e({selector:c,content:o});return""+t[1]+u.selector+t[3]+a+u.content+i}))},k=function(t){for(var e=t.split(b),r=[],n=[],s=0,c=[],o=0;o<e.length;o++){var i=e[o];"}"===i&&s--,s>0?c.push(i):(c.length>0&&(n.push(c.join("")),r.push(S),c=[]),r.push(i)),"{"===i&&s++}return c.length>0&&(n.push(c.join("")),r.push(S)),{escapedString:r.join(""),blocks:n}},O=function(t,e,r){return t.replace(e,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t[2]){for(var n=t[2].split(","),s=[],c=0;c<n.length;c++){var o=n[c].trim();if(!o)break;s.push(r(f,o,t[3]))}return s.join(",")}return f+t[3]}))},j=function(t,e,r){return t+e.replace(s,"")+r},E=function(t,e,r){return e.indexOf(s)>-1?j(t,e,r):t+e+r+", "+e+" "+t+r},R=function(t,e){var r=function(t){return t=t.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),new RegExp("^("+t+")([>\\s~+[.,{:][\\s\\S]*)?$","m")}(e);return!r.test(t)},C=function(t,e,r){e=e.replace(/\[is=([^\]]*)\]/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return e[0]}));for(var n,s="."+e,c=function(t){var n=t.trim();if(!n)return"";if(t.indexOf(f)>-1)n=function(t,e,r){if(g.lastIndex=0,g.test(t)){var n="."+r;return t.replace(p,(function(t,e){return e.replace(/([^:]*)(:*)(.*)/,(function(t,e,r,s){return e+n+r+s}))})).replace(g,n+" ")}return e+" "+t}(t,e,r);else{var c=t.replace(g,"");if(c.length>0){var o=c.match(/([^:]*)(:*)(.*)/);o&&(n=o[1]+s+o[2]+o[3])}}return n},o=function(t){var e=[],r=0;return{content:(t=t.replace(/(\[[^\]]*\])/g,(function(t,n){var s="__ph-"+r+"__";return e.push(n),r++,s}))).replace(/(:nth-[-\w]+)(\([^)]+\))/g,(function(t,n,s){var c="__ph-"+r+"__";return e.push(s),r++,n+c})),placeholders:e}}(t),i="",a=0,u=/( |>|\+|~(?!=))\s*/g,l=!((t=o.content).indexOf(f)>-1);null!==(n=u.exec(t));){var h=n[1],d=t.slice(a,n.index).trim();i+=((l=l||d.indexOf(f)>-1)?c(d):d)+" "+h+" ",a=u.lastIndex}var v,m=t.substring(a);return i+=(l=l||m.indexOf(f)>-1)?c(m):m,v=o.placeholders,i.replace(/__ph-(\d+)__/g,(function(t,e){return v[+e]}))},T=function t(e,r,n,s,c){return W(e,(function(e){var c=e.selector,o=e.content;return"@"!==e.selector[0]?c=function(t,e,r,n){return t.split(",").map((function(t){return n&&t.indexOf("."+n)>-1?t.trim():R(t,e)?C(t,e,r).trim():t.trim()})).join(", ")}(e.selector,r,n,s):(e.selector.startsWith("@media")||e.selector.startsWith("@supports")||e.selector.startsWith("@page")||e.selector.startsWith("@document"))&&(o=t(e.content,r,n,s)),{selector:c.replace(/\s{2,}/g," ").trim(),content:o}}))},L=function(t,e,r,n,i){var p=function(t,e){var r="."+e+" > ",n=[];return t=t.replace(l,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t[2]){for(var s=t[2].trim(),c=t[3],o=r+s+c,i="",a=t[4]-1;a>=0;a--){var u=t[5][a];if("}"===u||","===u)break;i=u+i}var l=i+o,p=""+i.trimRight()+o.trim();if(l.trim()!==p.trim()){var h=p+", "+l;n.push({orgSelector:l,updatedSelector:h})}return o}return f+t[3]})),{selectors:n,cssText:t}}(t=function(t){return O(t,u,E)}(t=function(t){return O(t,a,j)}(t=t.replace(m,o).replace(d,s).replace(v,c))),n);return t=function(t){return h.reduce((function(t,e){return t.replace(e," ")}),t)}(t=p.cssText),e&&(t=T(t,e,r,n)),{cssText:(t=(t=t.replace(/-shadowcsshost-no-combinator/g,"."+r)).replace(/>\s*\*\s+([^{, ]+)/gm," $1 ")).trim(),slottedSelectors:p.selectors}},B=function(t,e,r){var s=e+"-h",c=e+"-s",o=t.match(x)||[];t=function(t){return t.replace(_,"")}(t);var i=[];if(r){var a=function(t){var e="/*!@___"+i.length+"___*/",r="/*!@"+t.selector+"*/";return i.push({placeholder:e,comment:r}),t.selector=e+t.selector,t};t=W(t,(function(t){return"@"!==t.selector[0]?a(t):t.selector.startsWith("@media")||t.selector.startsWith("@supports")||t.selector.startsWith("@page")||t.selector.startsWith("@document")?(t.content=W(t.content,a),t):t}))}var u=L(t,e,s,c);return t=n([u.cssText],o).join("\n"),r&&i.forEach((function(e){var r=e.placeholder,n=e.comment;t=t.replace(r,n)})),u.slottedSelectors.forEach((function(e){t=t.replace(e.orgSelector,e.updatedSelector)})),t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dC9lc20tZXM1L3NoYWRvdy1jc3MtZDdkMDU4ZWMtZDU5Y2IwMDkuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICpcbiAqIFRoaXMgZmlsZSBpcyBhIHBvcnQgb2Ygc2hhZG93Q1NTIGZyb20gd2ViY29tcG9uZW50cy5qcyB0byBUeXBlU2NyaXB0LlxuICogaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL2Jsb2IvNGVmZWNkN2UwZS9zcmMvU2hhZG93Q1NTL1NoYWRvd0NTUy5qc1xuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21hc3Rlci9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50c1xuICovXG52YXIgc2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVycyA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNvbnRlbnQ7XG4gICAgLy8gUmVwbGFjZXMgYXR0cmlidXRlIHNlbGVjdG9ycyB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAvLyBUaGUgV1MgaW4gW2F0dHI9XCJ2YSBsdWVcIl0gd291bGQgb3RoZXJ3aXNlIGJlIGludGVycHJldGVkIGFzIGEgc2VsZWN0b3Igc2VwYXJhdG9yLlxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvKFxcW1teXFxdXSpcXF0pL2csIGZ1bmN0aW9uIChfLCBrZWVwKSB7XG4gICAgICAgIHZhciByZXBsYWNlQnkgPSBcIl9fcGgtXCIgKyBpbmRleCArIFwiX19cIjtcbiAgICAgICAgcGxhY2Vob2xkZXJzLnB1c2goa2VlcCk7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHJldHVybiByZXBsYWNlQnk7XG4gICAgfSk7XG4gICAgLy8gUmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW4gYDpudGgtY2hpbGQoMm4gKyAxKWAgd2l0aCBhIHBsYWNlaG9sZGVyLlxuICAgIC8vIFdTIGFuZCBcIitcIiB3b3VsZCBvdGhlcndpc2UgYmUgaW50ZXJwcmV0ZWQgYXMgc2VsZWN0b3Igc2VwYXJhdG9ycy5cbiAgICBjb250ZW50ID0gc2VsZWN0b3IucmVwbGFjZSgvKDpudGgtWy1cXHddKykoXFwoW14pXStcXCkpL2csIGZ1bmN0aW9uIChfLCBwc2V1ZG8sIGV4cCkge1xuICAgICAgICB2YXIgcmVwbGFjZUJ5ID0gXCJfX3BoLVwiICsgaW5kZXggKyBcIl9fXCI7XG4gICAgICAgIHBsYWNlaG9sZGVycy5wdXNoKGV4cCk7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHJldHVybiBwc2V1ZG8gKyByZXBsYWNlQnk7XG4gICAgfSk7XG4gICAgdmFyIHNzID0ge1xuICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICBwbGFjZWhvbGRlcnM6IHBsYWNlaG9sZGVycyxcbiAgICB9O1xuICAgIHJldHVybiBzcztcbn07XG52YXIgcmVzdG9yZVNhZmVTZWxlY3RvciA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlcnMsIGNvbnRlbnQpIHtcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKC9fX3BoLShcXGQrKV9fL2csIGZ1bmN0aW9uIChfLCBpbmRleCkgeyByZXR1cm4gcGxhY2Vob2xkZXJzWytpbmRleF07IH0pO1xufTtcbnZhciBfcG9seWZpbGxIb3N0ID0gJy1zaGFkb3djc3Nob3N0JztcbnZhciBfcG9seWZpbGxTbG90dGVkID0gJy1zaGFkb3djc3NzbG90dGVkJztcbi8vIG5vdGU6IDpob3N0LWNvbnRleHQgcHJlLXByb2Nlc3NlZCB0byAtc2hhZG93Y3NzaG9zdGNvbnRleHQuXG52YXIgX3BvbHlmaWxsSG9zdENvbnRleHQgPSAnLXNoYWRvd2Nzc2NvbnRleHQnO1xudmFyIF9wYXJlblN1ZmZpeCA9ICcpKD86XFxcXCgoJyArXG4gICAgJyg/OlxcXFwoW14pKF0qXFxcXCl8W14pKF0qKSs/JyArXG4gICAgJylcXFxcKSk/KFteLHtdKiknO1xudmFyIF9jc3NDb2xvbkhvc3RSZSA9IG5ldyBSZWdFeHAoJygnICsgX3BvbHlmaWxsSG9zdCArIF9wYXJlblN1ZmZpeCwgJ2dpbScpO1xudmFyIF9jc3NDb2xvbkhvc3RDb250ZXh0UmUgPSBuZXcgUmVnRXhwKCcoJyArIF9wb2x5ZmlsbEhvc3RDb250ZXh0ICsgX3BhcmVuU3VmZml4LCAnZ2ltJyk7XG52YXIgX2Nzc0NvbG9uU2xvdHRlZFJlID0gbmV3IFJlZ0V4cCgnKCcgKyBfcG9seWZpbGxTbG90dGVkICsgX3BhcmVuU3VmZml4LCAnZ2ltJyk7XG52YXIgX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciA9IF9wb2x5ZmlsbEhvc3QgKyAnLW5vLWNvbWJpbmF0b3InO1xudmFyIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3JSZSA9IC8tc2hhZG93Y3NzaG9zdC1uby1jb21iaW5hdG9yKFteXFxzXSopLztcbnZhciBfc2hhZG93RE9NU2VsZWN0b3JzUmUgPSBbXG4gICAgLzo6c2hhZG93L2csXG4gICAgLzo6Y29udGVudC9nXG5dO1xudmFyIF9zZWxlY3RvclJlU3VmZml4ID0gJyhbPlxcXFxzfitcXFsuLHs6XVtcXFxcc1xcXFxTXSopPyQnO1xudmFyIF9wb2x5ZmlsbEhvc3RSZSA9IC8tc2hhZG93Y3NzaG9zdC9naW07XG52YXIgX2NvbG9uSG9zdFJlID0gLzpob3N0L2dpbTtcbnZhciBfY29sb25TbG90dGVkUmUgPSAvOjpzbG90dGVkL2dpbTtcbnZhciBfY29sb25Ib3N0Q29udGV4dFJlID0gLzpob3N0LWNvbnRleHQvZ2ltO1xudmFyIF9jb21tZW50UmUgPSAvXFwvXFwqXFxzKltcXHNcXFNdKj9cXCpcXC8vZztcbnZhciBzdHJpcENvbW1lbnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoX2NvbW1lbnRSZSwgJycpO1xufTtcbnZhciBfY29tbWVudFdpdGhIYXNoUmUgPSAvXFwvXFwqXFxzKiNcXHMqc291cmNlKE1hcHBpbmcpP1VSTD1bXFxzXFxTXSs/XFwqXFwvL2c7XG52YXIgZXh0cmFjdENvbW1lbnRzV2l0aEhhc2ggPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQubWF0Y2goX2NvbW1lbnRXaXRoSGFzaFJlKSB8fCBbXTtcbn07XG52YXIgX3J1bGVSZSA9IC8oXFxzKikoW147XFx7XFx9XSs/KShcXHMqKSgoPzp7JUJMT0NLJX0/XFxzKjs/KXwoPzpcXHMqOykpL2c7XG52YXIgX2N1cmx5UmUgPSAvKFt7fV0pL2c7XG52YXIgT1BFTl9DVVJMWSA9ICd7JztcbnZhciBDTE9TRV9DVVJMWSA9ICd9JztcbnZhciBCTE9DS19QTEFDRUhPTERFUiA9ICclQkxPQ0slJztcbnZhciBwcm9jZXNzUnVsZXMgPSBmdW5jdGlvbiAoaW5wdXQsIHJ1bGVDYWxsYmFjaykge1xuICAgIHZhciBpbnB1dFdpdGhFc2NhcGVkQmxvY2tzID0gZXNjYXBlQmxvY2tzKGlucHV0KTtcbiAgICB2YXIgbmV4dEJsb2NrSW5kZXggPSAwO1xuICAgIHJldHVybiBpbnB1dFdpdGhFc2NhcGVkQmxvY2tzLmVzY2FwZWRTdHJpbmcucmVwbGFjZShfcnVsZVJlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGVjdG9yID0gbVsyXTtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSAnJztcbiAgICAgICAgdmFyIHN1ZmZpeCA9IG1bNF07XG4gICAgICAgIHZhciBjb250ZW50UHJlZml4ID0gJyc7XG4gICAgICAgIGlmIChzdWZmaXggJiYgc3VmZml4LnN0YXJ0c1dpdGgoJ3snICsgQkxPQ0tfUExBQ0VIT0xERVIpKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gaW5wdXRXaXRoRXNjYXBlZEJsb2Nrcy5ibG9ja3NbbmV4dEJsb2NrSW5kZXgrK107XG4gICAgICAgICAgICBzdWZmaXggPSBzdWZmaXguc3Vic3RyaW5nKEJMT0NLX1BMQUNFSE9MREVSLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgY29udGVudFByZWZpeCA9ICd7JztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3NzUnVsZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlQ2FsbGJhY2soY3NzUnVsZSk7XG4gICAgICAgIHJldHVybiBcIlwiICsgbVsxXSArIHJ1bGUuc2VsZWN0b3IgKyBtWzNdICsgY29udGVudFByZWZpeCArIHJ1bGUuY29udGVudCArIHN1ZmZpeDtcbiAgICB9KTtcbn07XG52YXIgZXNjYXBlQmxvY2tzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIGlucHV0UGFydHMgPSBpbnB1dC5zcGxpdChfY3VybHlSZSk7XG4gICAgdmFyIHJlc3VsdFBhcnRzID0gW107XG4gICAgdmFyIGVzY2FwZWRCbG9ja3MgPSBbXTtcbiAgICB2YXIgYnJhY2tldENvdW50ID0gMDtcbiAgICB2YXIgY3VycmVudEJsb2NrUGFydHMgPSBbXTtcbiAgICBmb3IgKHZhciBwYXJ0SW5kZXggPSAwOyBwYXJ0SW5kZXggPCBpbnB1dFBhcnRzLmxlbmd0aDsgcGFydEluZGV4KyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBpbnB1dFBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgIGlmIChwYXJ0ID09PSBDTE9TRV9DVVJMWSkge1xuICAgICAgICAgICAgYnJhY2tldENvdW50LS07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJyYWNrZXRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGN1cnJlbnRCbG9ja1BhcnRzLnB1c2gocGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrUGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGVzY2FwZWRCbG9ja3MucHVzaChjdXJyZW50QmxvY2tQYXJ0cy5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0UGFydHMucHVzaChCTE9DS19QTEFDRUhPTERFUik7XG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrUGFydHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnQgPT09IE9QRU5fQ1VSTFkpIHtcbiAgICAgICAgICAgIGJyYWNrZXRDb3VudCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50QmxvY2tQYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVzY2FwZWRCbG9ja3MucHVzaChjdXJyZW50QmxvY2tQYXJ0cy5qb2luKCcnKSk7XG4gICAgICAgIHJlc3VsdFBhcnRzLnB1c2goQkxPQ0tfUExBQ0VIT0xERVIpO1xuICAgIH1cbiAgICB2YXIgc3RyRXNjYXBlZEJsb2NrcyA9IHtcbiAgICAgICAgZXNjYXBlZFN0cmluZzogcmVzdWx0UGFydHMuam9pbignJyksXG4gICAgICAgIGJsb2NrczogZXNjYXBlZEJsb2Nrc1xuICAgIH07XG4gICAgcmV0dXJuIHN0ckVzY2FwZWRCbG9ja3M7XG59O1xudmFyIGluc2VydFBvbHlmaWxsSG9zdEluQ3NzVGV4dCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3JcbiAgICAgICAgLnJlcGxhY2UoX2NvbG9uSG9zdENvbnRleHRSZSwgX3BvbHlmaWxsSG9zdENvbnRleHQpXG4gICAgICAgIC5yZXBsYWNlKF9jb2xvbkhvc3RSZSwgX3BvbHlmaWxsSG9zdClcbiAgICAgICAgLnJlcGxhY2UoX2NvbG9uU2xvdHRlZFJlLCBfcG9seWZpbGxTbG90dGVkKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG59O1xudmFyIGNvbnZlcnRDb2xvblJ1bGUgPSBmdW5jdGlvbiAoY3NzVGV4dCwgcmVnRXhwLCBwYXJ0UmVwbGFjZXIpIHtcbiAgICAvLyBtWzFdID0gOmhvc3QoLWNvbnRleHQpLCBtWzJdID0gY29udGVudHMgb2YgKCksIG1bM10gcmVzdCBvZiBydWxlXG4gICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShyZWdFeHAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG0gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1bX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobVsyXSkge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gbVsyXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgdmFyIHIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHBhcnRzW2ldLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAoIXApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHIucHVzaChwYXJ0UmVwbGFjZXIoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciwgcCwgbVszXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHIuam9pbignLCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3IgKyBtWzNdO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xudmFyIGNvbG9uSG9zdFBhcnRSZXBsYWNlciA9IGZ1bmN0aW9uIChob3N0LCBwYXJ0LCBzdWZmaXgpIHtcbiAgICByZXR1cm4gaG9zdCArIHBhcnQucmVwbGFjZShfcG9seWZpbGxIb3N0LCAnJykgKyBzdWZmaXg7XG59O1xudmFyIGNvbnZlcnRDb2xvbkhvc3QgPSBmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgIHJldHVybiBjb252ZXJ0Q29sb25SdWxlKGNzc1RleHQsIF9jc3NDb2xvbkhvc3RSZSwgY29sb25Ib3N0UGFydFJlcGxhY2VyKTtcbn07XG52YXIgY29sb25Ib3N0Q29udGV4dFBhcnRSZXBsYWNlciA9IGZ1bmN0aW9uIChob3N0LCBwYXJ0LCBzdWZmaXgpIHtcbiAgICBpZiAocGFydC5pbmRleE9mKF9wb2x5ZmlsbEhvc3QpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9uSG9zdFBhcnRSZXBsYWNlcihob3N0LCBwYXJ0LCBzdWZmaXgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGhvc3QgKyBwYXJ0ICsgc3VmZml4ICsgJywgJyArIHBhcnQgKyAnICcgKyBob3N0ICsgc3VmZml4O1xuICAgIH1cbn07XG52YXIgY29udmVydENvbG9uU2xvdHRlZCA9IGZ1bmN0aW9uIChjc3NUZXh0LCBzbG90U2NvcGVJZCkge1xuICAgIHZhciBzbG90Q2xhc3MgPSAnLicgKyBzbG90U2NvcGVJZCArICcgPiAnO1xuICAgIHZhciBzZWxlY3RvcnMgPSBbXTtcbiAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKF9jc3NDb2xvblNsb3R0ZWRSZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtWzJdKSB7XG4gICAgICAgICAgICB2YXIgY29tcG91bmQgPSBtWzJdLnRyaW0oKTtcbiAgICAgICAgICAgIHZhciBzdWZmaXggPSBtWzNdO1xuICAgICAgICAgICAgdmFyIHNsb3R0ZWRTZWxlY3RvciA9IHNsb3RDbGFzcyArIGNvbXBvdW5kICsgc3VmZml4O1xuICAgICAgICAgICAgdmFyIHByZWZpeFNlbGVjdG9yID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbVs0XSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXIgPSBtWzVdW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnfScgfHwgY2hhciA9PT0gJywnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVmaXhTZWxlY3RvciA9IGNoYXIgKyBwcmVmaXhTZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvcmdTZWxlY3RvciA9IHByZWZpeFNlbGVjdG9yICsgc2xvdHRlZFNlbGVjdG9yO1xuICAgICAgICAgICAgdmFyIGFkZGVkU2VsZWN0b3IgPSBcIlwiICsgcHJlZml4U2VsZWN0b3IudHJpbVJpZ2h0KCkgKyBzbG90dGVkU2VsZWN0b3IudHJpbSgpO1xuICAgICAgICAgICAgaWYgKG9yZ1NlbGVjdG9yLnRyaW0oKSAhPT0gYWRkZWRTZWxlY3Rvci50cmltKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlbGVjdG9yID0gYWRkZWRTZWxlY3RvciArIFwiLCBcIiArIG9yZ1NlbGVjdG9yO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgb3JnU2VsZWN0b3I6IG9yZ1NlbGVjdG9yLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VsZWN0b3I6IHVwZGF0ZWRTZWxlY3RvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzbG90dGVkU2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciArIG1bM107XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RvcnM6IHNlbGVjdG9ycyxcbiAgICAgICAgY3NzVGV4dDogY3NzVGV4dFxuICAgIH07XG59O1xudmFyIGNvbnZlcnRDb2xvbkhvc3RDb250ZXh0ID0gZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgICByZXR1cm4gY29udmVydENvbG9uUnVsZShjc3NUZXh0LCBfY3NzQ29sb25Ib3N0Q29udGV4dFJlLCBjb2xvbkhvc3RDb250ZXh0UGFydFJlcGxhY2VyKTtcbn07XG52YXIgY29udmVydFNoYWRvd0RPTVNlbGVjdG9ycyA9IGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gICAgcmV0dXJuIF9zaGFkb3dET01TZWxlY3RvcnNSZS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgcGF0dGVybikgeyByZXR1cm4gcmVzdWx0LnJlcGxhY2UocGF0dGVybiwgJyAnKTsgfSwgY3NzVGV4dCk7XG59O1xudmFyIG1ha2VTY29wZU1hdGNoZXIgPSBmdW5jdGlvbiAoc2NvcGVTZWxlY3Rvcikge1xuICAgIHZhciBscmUgPSAvXFxbL2c7XG4gICAgdmFyIHJyZSA9IC9cXF0vZztcbiAgICBzY29wZVNlbGVjdG9yID0gc2NvcGVTZWxlY3Rvci5yZXBsYWNlKGxyZSwgJ1xcXFxbJykucmVwbGFjZShycmUsICdcXFxcXScpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeKCcgKyBzY29wZVNlbGVjdG9yICsgJyknICsgX3NlbGVjdG9yUmVTdWZmaXgsICdtJyk7XG59O1xudmFyIHNlbGVjdG9yTmVlZHNTY29waW5nID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBzY29wZVNlbGVjdG9yKSB7XG4gICAgdmFyIHJlID0gbWFrZVNjb3BlTWF0Y2hlcihzY29wZVNlbGVjdG9yKTtcbiAgICByZXR1cm4gIXJlLnRlc3Qoc2VsZWN0b3IpO1xufTtcbnZhciBhcHBseVNpbXBsZVNlbGVjdG9yU2NvcGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvcikge1xuICAgIC8vIEluIEFuZHJvaWQgYnJvd3NlciwgdGhlIGxhc3RJbmRleCBpcyBub3QgcmVzZXQgd2hlbiB0aGUgcmVnZXggaXMgdXNlZCBpbiBTdHJpbmcucmVwbGFjZSgpXG4gICAgX3BvbHlmaWxsSG9zdFJlLmxhc3RJbmRleCA9IDA7XG4gICAgaWYgKF9wb2x5ZmlsbEhvc3RSZS50ZXN0KHNlbGVjdG9yKSkge1xuICAgICAgICB2YXIgcmVwbGFjZUJ5XzEgPSBcIi5cIiArIGhvc3RTZWxlY3RvcjtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yXG4gICAgICAgICAgICAucmVwbGFjZShfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yUmUsIGZ1bmN0aW9uIChfLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoLyhbXjpdKikoOiopKC4qKS8sIGZ1bmN0aW9uIChfLCBiZWZvcmUsIGNvbG9uLCBhZnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiZWZvcmUgKyByZXBsYWNlQnlfMSArIGNvbG9uICsgYWZ0ZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKF9wb2x5ZmlsbEhvc3RSZSwgcmVwbGFjZUJ5XzEgKyAnICcpO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGVTZWxlY3RvciArICcgJyArIHNlbGVjdG9yO1xufTtcbnZhciBhcHBseVN0cmljdFNlbGVjdG9yU2NvcGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvcikge1xuICAgIHZhciBpc1JlID0gL1xcW2lzPShbXlxcXV0qKVxcXS9nO1xuICAgIHNjb3BlU2VsZWN0b3IgPSBzY29wZVNlbGVjdG9yLnJlcGxhY2UoaXNSZSwgZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXJ0c1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgfSk7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICcuJyArIHNjb3BlU2VsZWN0b3I7XG4gICAgdmFyIF9zY29wZVNlbGVjdG9yUGFydCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHZhciBzY29wZWRQID0gcC50cmltKCk7XG4gICAgICAgIGlmICghc2NvcGVkUCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwLmluZGV4T2YoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvcikgPiAtMSkge1xuICAgICAgICAgICAgc2NvcGVkUCA9IGFwcGx5U2ltcGxlU2VsZWN0b3JTY29wZShwLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIDpob3N0IHNpbmNlIGl0IHNob3VsZCBiZSB1bm5lY2Vzc2FyeVxuICAgICAgICAgICAgdmFyIHQgPSBwLnJlcGxhY2UoX3BvbHlmaWxsSG9zdFJlLCAnJyk7XG4gICAgICAgICAgICBpZiAodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB0Lm1hdGNoKC8oW146XSopKDoqKSguKikvKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBzY29wZWRQID0gbWF0Y2hlc1sxXSArIGNsYXNzTmFtZSArIG1hdGNoZXNbMl0gKyBtYXRjaGVzWzNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGVkUDtcbiAgICB9O1xuICAgIHZhciBzYWZlQ29udGVudCA9IHNhZmVTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgc2VsZWN0b3IgPSBzYWZlQ29udGVudC5jb250ZW50O1xuICAgIHZhciBzY29wZWRTZWxlY3RvciA9ICcnO1xuICAgIHZhciBzdGFydEluZGV4ID0gMDtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBzZXAgPSAvKCB8PnxcXCt8fig/IT0pKVxccyovZztcbiAgICAvLyBJZiBhIHNlbGVjdG9yIGFwcGVhcnMgYmVmb3JlIDpob3N0IGl0IHNob3VsZCBub3QgYmUgc2hpbW1lZCBhcyBpdFxuICAgIC8vIG1hdGNoZXMgb24gYW5jZXN0b3IgZWxlbWVudHMgYW5kIG5vdCBvbiBlbGVtZW50cyBpbiB0aGUgaG9zdCdzIHNoYWRvd1xuICAgIC8vIGA6aG9zdC1jb250ZXh0KGRpdilgIGlzIHRyYW5zZm9ybWVkIHRvXG4gICAgLy8gYC1zaGFkb3djc3Nob3N0LW5vLWNvbWJpbmF0b3JkaXYsIGRpdiAtc2hhZG93Y3NzaG9zdC1uby1jb21iaW5hdG9yYFxuICAgIC8vIHRoZSBgZGl2YCBpcyBub3QgcGFydCBvZiB0aGUgY29tcG9uZW50IGluIHRoZSAybmQgc2VsZWN0b3JzIGFuZCBzaG91bGQgbm90IGJlIHNjb3BlZC5cbiAgICAvLyBIaXN0b3JpY2FsbHkgYGNvbXBvbmVudC10YWc6aG9zdGAgd2FzIG1hdGNoaW5nIHRoZSBjb21wb25lbnQgc28gd2UgYWxzbyB3YW50IHRvIHByZXNlcnZlXG4gICAgLy8gdGhpcyBiZWhhdmlvciB0byBhdm9pZCBicmVha2luZyBsZWdhY3kgYXBwcyAoaXQgc2hvdWxkIG5vdCBtYXRjaCkuXG4gICAgLy8gVGhlIGJlaGF2aW9yIHNob3VsZCBiZTpcbiAgICAvLyAtIGB0YWc6aG9zdGAgLT4gYHRhZ1toXWAgKHRoaXMgaXMgdG8gYXZvaWQgYnJlYWtpbmcgbGVnYWN5IGFwcHMsIHNob3VsZCBub3QgbWF0Y2ggYW55dGhpbmcpXG4gICAgLy8gLSBgdGFnIDpob3N0YCAtPiBgdGFnIFtoXWAgKGB0YWdgIGlzIG5vdCBzY29wZWQgYmVjYXVzZSBpdCdzIGNvbnNpZGVyZWQgcGFydCBvZiBhXG4gICAgLy8gICBgOmhvc3QtY29udGV4dCh0YWcpYClcbiAgICB2YXIgaGFzSG9zdCA9IHNlbGVjdG9yLmluZGV4T2YoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvcikgPiAtMTtcbiAgICAvLyBPbmx5IHNjb3BlIHBhcnRzIGFmdGVyIHRoZSBmaXJzdCBgLXNoYWRvd2Nzc2hvc3Qtbm8tY29tYmluYXRvcmAgd2hlbiBpdCBpcyBwcmVzZW50XG4gICAgdmFyIHNob3VsZFNjb3BlID0gIWhhc0hvc3Q7XG4gICAgd2hpbGUgKChyZXMgPSBzZXAuZXhlYyhzZWxlY3RvcikpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSByZXNbMV07XG4gICAgICAgIHZhciBwYXJ0XzEgPSBzZWxlY3Rvci5zbGljZShzdGFydEluZGV4LCByZXMuaW5kZXgpLnRyaW0oKTtcbiAgICAgICAgc2hvdWxkU2NvcGUgPSBzaG91bGRTY29wZSB8fCBwYXJ0XzEuaW5kZXhPZihfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yKSA+IC0xO1xuICAgICAgICB2YXIgc2NvcGVkUGFydCA9IHNob3VsZFNjb3BlID8gX3Njb3BlU2VsZWN0b3JQYXJ0KHBhcnRfMSkgOiBwYXJ0XzE7XG4gICAgICAgIHNjb3BlZFNlbGVjdG9yICs9IHNjb3BlZFBhcnQgKyBcIiBcIiArIHNlcGFyYXRvciArIFwiIFwiO1xuICAgICAgICBzdGFydEluZGV4ID0gc2VwLmxhc3RJbmRleDtcbiAgICB9XG4gICAgdmFyIHBhcnQgPSBzZWxlY3Rvci5zdWJzdHJpbmcoc3RhcnRJbmRleCk7XG4gICAgc2hvdWxkU2NvcGUgPSBzaG91bGRTY29wZSB8fCBwYXJ0LmluZGV4T2YoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvcikgPiAtMTtcbiAgICBzY29wZWRTZWxlY3RvciArPSBzaG91bGRTY29wZSA/IF9zY29wZVNlbGVjdG9yUGFydChwYXJ0KSA6IHBhcnQ7XG4gICAgLy8gcmVwbGFjZSB0aGUgcGxhY2Vob2xkZXJzIHdpdGggdGhlaXIgb3JpZ2luYWwgdmFsdWVzXG4gICAgcmV0dXJuIHJlc3RvcmVTYWZlU2VsZWN0b3Ioc2FmZUNvbnRlbnQucGxhY2Vob2xkZXJzLCBzY29wZWRTZWxlY3Rvcik7XG59O1xudmFyIHNjb3BlU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3JUZXh0LCBob3N0U2VsZWN0b3IsIHNsb3RTZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3Rvci5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHNoYWxsb3dQYXJ0KSB7XG4gICAgICAgIGlmIChzbG90U2VsZWN0b3IgJiYgc2hhbGxvd1BhcnQuaW5kZXhPZignLicgKyBzbG90U2VsZWN0b3IpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFsbG93UGFydC50cmltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdG9yTmVlZHNTY29waW5nKHNoYWxsb3dQYXJ0LCBzY29wZVNlbGVjdG9yVGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseVN0cmljdFNlbGVjdG9yU2NvcGUoc2hhbGxvd1BhcnQsIHNjb3BlU2VsZWN0b3JUZXh0LCBob3N0U2VsZWN0b3IpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFsbG93UGFydC50cmltKCk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuam9pbignLCAnKTtcbn07XG52YXIgc2NvcGVTZWxlY3RvcnMgPSBmdW5jdGlvbiAoY3NzVGV4dCwgc2NvcGVTZWxlY3RvclRleHQsIGhvc3RTZWxlY3Rvciwgc2xvdFNlbGVjdG9yLCBjb21tZW50T3JpZ2luYWxTZWxlY3Rvcikge1xuICAgIHJldHVybiBwcm9jZXNzUnVsZXMoY3NzVGV4dCwgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvcjtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBydWxlLmNvbnRlbnQ7XG4gICAgICAgIGlmIChydWxlLnNlbGVjdG9yWzBdICE9PSAnQCcpIHtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2NvcGVTZWxlY3RvcihydWxlLnNlbGVjdG9yLCBzY29wZVNlbGVjdG9yVGV4dCwgaG9zdFNlbGVjdG9yLCBzbG90U2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJ1bGUuc2VsZWN0b3Iuc3RhcnRzV2l0aCgnQG1lZGlhJykgfHwgcnVsZS5zZWxlY3Rvci5zdGFydHNXaXRoKCdAc3VwcG9ydHMnKSB8fFxuICAgICAgICAgICAgcnVsZS5zZWxlY3Rvci5zdGFydHNXaXRoKCdAcGFnZScpIHx8IHJ1bGUuc2VsZWN0b3Iuc3RhcnRzV2l0aCgnQGRvY3VtZW50JykpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBzY29wZVNlbGVjdG9ycyhydWxlLmNvbnRlbnQsIHNjb3BlU2VsZWN0b3JUZXh0LCBob3N0U2VsZWN0b3IsIHNsb3RTZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNzc1J1bGUgPSB7XG4gICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IucmVwbGFjZSgvXFxzezIsfS9nLCAnICcpLnRyaW0oKSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNzc1J1bGU7XG4gICAgfSk7XG59O1xudmFyIHNjb3BlQ3NzVGV4dCA9IGZ1bmN0aW9uIChjc3NUZXh0LCBzY29wZUlkLCBob3N0U2NvcGVJZCwgc2xvdFNjb3BlSWQsIGNvbW1lbnRPcmlnaW5hbFNlbGVjdG9yKSB7XG4gICAgY3NzVGV4dCA9IGluc2VydFBvbHlmaWxsSG9zdEluQ3NzVGV4dChjc3NUZXh0KTtcbiAgICBjc3NUZXh0ID0gY29udmVydENvbG9uSG9zdChjc3NUZXh0KTtcbiAgICBjc3NUZXh0ID0gY29udmVydENvbG9uSG9zdENvbnRleHQoY3NzVGV4dCk7XG4gICAgdmFyIHNsb3R0ZWQgPSBjb252ZXJ0Q29sb25TbG90dGVkKGNzc1RleHQsIHNsb3RTY29wZUlkKTtcbiAgICBjc3NUZXh0ID0gc2xvdHRlZC5jc3NUZXh0O1xuICAgIGNzc1RleHQgPSBjb252ZXJ0U2hhZG93RE9NU2VsZWN0b3JzKGNzc1RleHQpO1xuICAgIGlmIChzY29wZUlkKSB7XG4gICAgICAgIGNzc1RleHQgPSBzY29wZVNlbGVjdG9ycyhjc3NUZXh0LCBzY29wZUlkLCBob3N0U2NvcGVJZCwgc2xvdFNjb3BlSWQpO1xuICAgIH1cbiAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKC8tc2hhZG93Y3NzaG9zdC1uby1jb21iaW5hdG9yL2csIFwiLlwiICsgaG9zdFNjb3BlSWQpO1xuICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UoLz5cXHMqXFwqXFxzKyhbXnssIF0rKS9nbSwgJyAkMSAnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjc3NUZXh0OiBjc3NUZXh0LnRyaW0oKSxcbiAgICAgICAgc2xvdHRlZFNlbGVjdG9yczogc2xvdHRlZC5zZWxlY3RvcnMsXG4gICAgfTtcbn07XG52YXIgc2NvcGVDc3MgPSBmdW5jdGlvbiAoY3NzVGV4dCwgc2NvcGVJZCwgY29tbWVudE9yaWdpbmFsU2VsZWN0b3IpIHtcbiAgICB2YXIgaG9zdFNjb3BlSWQgPSBzY29wZUlkICsgJy1oJztcbiAgICB2YXIgc2xvdFNjb3BlSWQgPSBzY29wZUlkICsgJy1zJztcbiAgICB2YXIgY29tbWVudHNXaXRoSGFzaCA9IGV4dHJhY3RDb21tZW50c1dpdGhIYXNoKGNzc1RleHQpO1xuICAgIGNzc1RleHQgPSBzdHJpcENvbW1lbnRzKGNzc1RleHQpO1xuICAgIHZhciBvcmdTZWxlY3RvcnMgPSBbXTtcbiAgICBpZiAoY29tbWVudE9yaWdpbmFsU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHByb2Nlc3NDb21tZW50ZWRTZWxlY3Rvcl8xID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IFwiLyohQF9fX1wiICsgb3JnU2VsZWN0b3JzLmxlbmd0aCArIFwiX19fKi9cIjtcbiAgICAgICAgICAgIHZhciBjb21tZW50ID0gXCIvKiFAXCIgKyBydWxlLnNlbGVjdG9yICsgXCIqL1wiO1xuICAgICAgICAgICAgb3JnU2VsZWN0b3JzLnB1c2goeyBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsIGNvbW1lbnQ6IGNvbW1lbnQgfSk7XG4gICAgICAgICAgICBydWxlLnNlbGVjdG9yID0gcGxhY2Vob2xkZXIgKyBydWxlLnNlbGVjdG9yO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgICAgIH07XG4gICAgICAgIGNzc1RleHQgPSBwcm9jZXNzUnVsZXMoY3NzVGV4dCwgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgIGlmIChydWxlLnNlbGVjdG9yWzBdICE9PSAnQCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0NvbW1lbnRlZFNlbGVjdG9yXzEocnVsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChydWxlLnNlbGVjdG9yLnN0YXJ0c1dpdGgoJ0BtZWRpYScpIHx8IHJ1bGUuc2VsZWN0b3Iuc3RhcnRzV2l0aCgnQHN1cHBvcnRzJykgfHxcbiAgICAgICAgICAgICAgICBydWxlLnNlbGVjdG9yLnN0YXJ0c1dpdGgoJ0BwYWdlJykgfHwgcnVsZS5zZWxlY3Rvci5zdGFydHNXaXRoKCdAZG9jdW1lbnQnKSkge1xuICAgICAgICAgICAgICAgIHJ1bGUuY29udGVudCA9IHByb2Nlc3NSdWxlcyhydWxlLmNvbnRlbnQsIHByb2Nlc3NDb21tZW50ZWRTZWxlY3Rvcl8xKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHNjb3BlZCA9IHNjb3BlQ3NzVGV4dChjc3NUZXh0LCBzY29wZUlkLCBob3N0U2NvcGVJZCwgc2xvdFNjb3BlSWQpO1xuICAgIGNzc1RleHQgPSBfX3NwcmVhZEFycmF5cyhbc2NvcGVkLmNzc1RleHRdLCBjb21tZW50c1dpdGhIYXNoKS5qb2luKCdcXG4nKTtcbiAgICBpZiAoY29tbWVudE9yaWdpbmFsU2VsZWN0b3IpIHtcbiAgICAgICAgb3JnU2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBfYS5wbGFjZWhvbGRlciwgY29tbWVudCA9IF9hLmNvbW1lbnQ7XG4gICAgICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKHBsYWNlaG9sZGVyLCBjb21tZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNjb3BlZC5zbG90dGVkU2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKHNsb3R0ZWRTZWxlY3Rvcikge1xuICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKHNsb3R0ZWRTZWxlY3Rvci5vcmdTZWxlY3Rvciwgc2xvdHRlZFNlbGVjdG9yLnVwZGF0ZWRTZWxlY3Rvcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzc1RleHQ7XG59O1xuZXhwb3J0IHsgc2NvcGVDc3MgfTtcbiJdLCJuYW1lcyI6WyJfX3NwcmVhZEFycmF5cyIsInMiLCJpIiwiaWwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiQXJyYXkiLCJrIiwiYSIsImoiLCJqbCIsIl9wb2x5ZmlsbEhvc3QiLCJfcG9seWZpbGxTbG90dGVkIiwiX3BvbHlmaWxsSG9zdENvbnRleHQiLCJfcGFyZW5TdWZmaXgiLCJfY3NzQ29sb25Ib3N0UmUiLCJSZWdFeHAiLCJfY3NzQ29sb25Ib3N0Q29udGV4dFJlIiwiX2Nzc0NvbG9uU2xvdHRlZFJlIiwiX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciIsIl9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3JSZSIsIl9zaGFkb3dET01TZWxlY3RvcnNSZSIsIl9wb2x5ZmlsbEhvc3RSZSIsIl9jb2xvbkhvc3RSZSIsIl9jb2xvblNsb3R0ZWRSZSIsIl9jb2xvbkhvc3RDb250ZXh0UmUiLCJfY29tbWVudFJlIiwiX2NvbW1lbnRXaXRoSGFzaFJlIiwiX3J1bGVSZSIsIl9jdXJseVJlIiwiQkxPQ0tfUExBQ0VIT0xERVIiLCJwcm9jZXNzUnVsZXMiLCJpbnB1dCIsInJ1bGVDYWxsYmFjayIsImlucHV0V2l0aEVzY2FwZWRCbG9ja3MiLCJlc2NhcGVCbG9ja3MiLCJuZXh0QmxvY2tJbmRleCIsImVzY2FwZWRTdHJpbmciLCJyZXBsYWNlIiwibSIsIl9pIiwic2VsZWN0b3IiLCJjb250ZW50Iiwic3VmZml4IiwiY29udGVudFByZWZpeCIsInN0YXJ0c1dpdGgiLCJibG9ja3MiLCJzdWJzdHJpbmciLCJydWxlIiwiaW5wdXRQYXJ0cyIsInNwbGl0IiwicmVzdWx0UGFydHMiLCJlc2NhcGVkQmxvY2tzIiwiYnJhY2tldENvdW50IiwiY3VycmVudEJsb2NrUGFydHMiLCJwYXJ0SW5kZXgiLCJwYXJ0IiwicHVzaCIsImpvaW4iLCJjb252ZXJ0Q29sb25SdWxlIiwiY3NzVGV4dCIsInJlZ0V4cCIsInBhcnRSZXBsYWNlciIsInBhcnRzIiwicCIsInRyaW0iLCJjb2xvbkhvc3RQYXJ0UmVwbGFjZXIiLCJob3N0IiwiY29sb25Ib3N0Q29udGV4dFBhcnRSZXBsYWNlciIsImluZGV4T2YiLCJzZWxlY3Rvck5lZWRzU2NvcGluZyIsInNjb3BlU2VsZWN0b3IiLCJyZSIsIm1ha2VTY29wZU1hdGNoZXIiLCJ0ZXN0IiwiYXBwbHlTdHJpY3RTZWxlY3RvclNjb3BlIiwiaG9zdFNlbGVjdG9yIiwiXyIsInJlcyIsImNsYXNzTmFtZSIsIl9zY29wZVNlbGVjdG9yUGFydCIsInNjb3BlZFAiLCJsYXN0SW5kZXgiLCJyZXBsYWNlQnlfMSIsImJlZm9yZSIsImNvbG9uIiwiYWZ0ZXIiLCJhcHBseVNpbXBsZVNlbGVjdG9yU2NvcGUiLCJ0IiwibWF0Y2hlcyIsIm1hdGNoIiwic2FmZUNvbnRlbnQiLCJwbGFjZWhvbGRlcnMiLCJpbmRleCIsImtlZXAiLCJyZXBsYWNlQnkiLCJwc2V1ZG8iLCJleHAiLCJzYWZlU2VsZWN0b3IiLCJzY29wZWRTZWxlY3RvciIsInN0YXJ0SW5kZXgiLCJzZXAiLCJzaG91bGRTY29wZSIsImV4ZWMiLCJzZXBhcmF0b3IiLCJwYXJ0XzEiLCJzbGljZSIsInNjb3BlU2VsZWN0b3JzIiwic2NvcGVTZWxlY3RvclRleHQiLCJzbG90U2VsZWN0b3IiLCJjb21tZW50T3JpZ2luYWxTZWxlY3RvciIsIm1hcCIsInNoYWxsb3dQYXJ0Iiwic2NvcGVDc3NUZXh0Iiwic2NvcGVJZCIsImhvc3RTY29wZUlkIiwic2xvdFNjb3BlSWQiLCJzbG90dGVkIiwic2xvdENsYXNzIiwic2VsZWN0b3JzIiwiY29tcG91bmQiLCJzbG90dGVkU2VsZWN0b3IiLCJwcmVmaXhTZWxlY3RvciIsImNoYXIiLCJvcmdTZWxlY3RvciIsImFkZGVkU2VsZWN0b3IiLCJ0cmltUmlnaHQiLCJ1cGRhdGVkU2VsZWN0b3IiLCJjb252ZXJ0Q29sb25TbG90dGVkIiwiY29udmVydENvbG9uSG9zdENvbnRleHQiLCJjb252ZXJ0Q29sb25Ib3N0IiwicmVkdWNlIiwicmVzdWx0IiwicGF0dGVybiIsImNvbnZlcnRTaGFkb3dET01TZWxlY3RvcnMiLCJzbG90dGVkU2VsZWN0b3JzIiwic2NvcGVDc3MiLCJjb21tZW50c1dpdGhIYXNoIiwic3RyaXBDb21tZW50cyIsIm9yZ1NlbGVjdG9ycyIsInByb2Nlc3NDb21tZW50ZWRTZWxlY3Rvcl8xIiwicGxhY2Vob2xkZXIiLCJjb21tZW50Iiwic2NvcGVkIiwiZm9yRWFjaCIsIl9hIl0sInNvdXJjZVJvb3QiOiIifQ==